name "uw_particle_localization"

using_library "uw_localization"
using_library "machine_learning"
using_library "aggregator"

import_types_from "base"
import_types_from "aggregator"
import_types_from "tasks/Types.hpp"
import_types_from "uw_localization/types/particle.hpp"
import_types_from "uw_localization/types/info.hpp"
import_types_from "uw_localization/types/map.hpp"
import_types_from "uw_localization/types/environment.hpp"

task_context "Task" do
   # ----------------------------------------------------------------------
   # output samples 
   # ----------------------------------------------------------------------
   
   output_port("environment", "/uw_localization/Environment").
        doc("current map environment")

   output_port("pose_samples", "/base/samples/RigidBodyState").
        doc("pose estimation merged with other state informations")

   output_port("particles", "/uw_localization/ParticleSet").
        doc("current particle set used in this filter")

   output_port("debug_sonar", "/uw_localization/ParticleInfo").
        doc("Debug information for sonar perceptions")

   output_port("streamaligner_status", "/aggregator/StreamAlignerStatus").
        doc("provides debug information on the state of stream aligner")


   # ----------------------------------------------------------------------
   # input samples 
   # ----------------------------------------------------------------------

   input_port("laser_samples", "/base/samples/LaserScan").
        doc("relative distance sample to an obstacle in the environment").
        needs_reliable_connection

   input_port("orientation_samples", "/base/samples/RigidBodyState").
        doc("current orientation of the vehicle").
        needs_reliable_connection

   input_port("speed_samples", "/base/samples/RigidBodyState").
        doc("current motion sample retrieved from our motion model").
        needs_reliable_connection

   input_port("pose_update", "/base/samples/RigidBodyState").
        doc("position samples from another localization").
        needs_reliable_connection

   input_port("ground_truth", "/base/samples/RigidBodyState").
        doc("current ground truth for particle teleport").
        needs_reliable_connection

   # ----------------------------------------------------------------------
   # properties
   # ----------------------------------------------------------------------

   property("yaw_offset", "double", 0.0).
        doc("yaw offset if reference heading is not constistent with current mission")

   property("particle_number", "int", 50).
        doc("number of used particles")

   property("minimum_depth", "double", -0.4).
        doc("minimum depth for collecting perception samples")

   property("aliasing_buffer_size", "int", 5).
        doc("fir size for pose aliasing on output port")

   property("particle_interspersal_ratio", "double", 0.0).
        doc("ratio for generating new particles after each measurement")

   property("effective_sample_size_threshold", "double", 0.0).
	doc("effective sample size threshold controls the resampling timing and uses values between 0.0 and 1.0 particles")

   property("reset_timeout", "double", 10.0).
        doc("automatic reset of particle filter after not receiving any perception for X seconds")

   property("minimum_perceptions", "int", 5).
	doc("minimum number of perceptions before starting resampling")

   property("init_position", "/std/vector<double>").
        doc("initial centre position for all particles")

   property("init_variance", "/std/vector<double>").
        doc("spatial covariance from initial centre position for initialization")

   property("yaml_map", "/std/string").
	doc("start map for localization algorithm")

   property("sonar_maximum_distance", "double", 20.0).
        doc("set maximum distance for filtering sonar samples")

   property("sonar_minimum_distance", "double", 1.0).
        doc("set maximum distance for filtering sonar samples")

   property("sonar_covariance", "double", 2.0).
        doc("sets sonar covariance for defining measurement uncertainty")

   property("pure_random_motion", "bool", false).
        doc("ignore velocity in speed samples for dynamic update")

   property("static_motion_covariance", "/std/vector<double>").
        doc("sets a static covariance for speed samples")

   property("sonar_importance", "double", 1.0).
	doc("sets importance ratio for sonar perception updates")
 
   # ----------------------------------------------------------------------
   # aggregator properties 
   # ----------------------------------------------------------------------

   property("max_sample_delay", "double", 2.0).
        doc("Time in s the particle filter will wait for expected samples")

   property("laser_period", "double", 0.1)
   property("orientation_period", "double", 0.01)
   property("speed_period", "double", 0.01)
   property("hough_period", "double", 0.1)
   property("groundtruth_period", "double", 0.01)

   port_driven :laser_samples
   port_driven :orientation_samples
   port_driven :speed_samples
   port_driven :pose_update
   port_driven :ground_truth
end


# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "uw_particle_localization_test" do
    # This is a test deployment that should not be installed
    do_not_install
    add_default_logger

    # Declares it as periodic, with a period of 100ms
    task("uw_particle_localization", "Task")
end

