name "uw_particle_localization"

using_library "uw_localization"
using_library "machine_learning"
using_library "uwv_dynamic_model"

import_types_from "base"
import_types_from "tasks/Types.hpp"
import_types_from "offshore_pipeline_detector"
import_types_from "uw_localization/types/particle.hpp"
import_types_from "uw_localization/types/info.hpp"
#import_types_from "uw_localization/types/map.hpp"
import_types_from "uw_localization/types/environment.hpp"
import_types_from "battery_management"

task_context "Task" do
   # ----------------------------------------------------------------------
   # output samples 
   # ----------------------------------------------------------------------
   
   output_port("environment", "/uw_localization/Environment").
        doc("current map environment")

   output_port("pose_samples", "/base/samples/RigidBodyState").
        doc("pose estimation merged with other state informations")

   output_port("dead_reckoning_samples", "/base/samples/RigidBodyState").
        doc("poses measured only by motion model")
        
   output_port("full_dead_reckoning", "/base/samples/RigidBodyState").
	doc("poes measured only by motion model, in al 6 degrees of freedom. Only available with the advanced motion model")

   output_port("particles", "/uw_localization/ParticleSet").
        doc("current particle set used in this filter")

   output_port("debug_sonar_beam", "/uw_localization/PointInfo").
        doc("Debug information for best sonar perceptions")

   output_port("stats", "/uw_localization/Stats").
        doc("various values representing current localization state")

   # ----------------------------------------------------------------------
   # input samples 
   # ----------------------------------------------------------------------

   input_port("laser_samples", "/base/samples/LaserScan").
        doc("relative distance sample to an obstacle in the environment").
        needs_reliable_connection

   input_port("orientation_samples", "/base/samples/RigidBodyState").
        doc("current orientation of the vehicle").
        needs_reliable_connection

   input_port("speed_samples", "/base/samples/RigidBodyState").
        doc("current motion sample retrieved from our motion model").
        needs_reliable_connection

   input_port('thruster_samples', '/base/actuators/Status').
        doc('status input for thrusters')
      
   input_port('thruster_commands', '/base/actuators/Command').
	doc('command input for thrusters. alternative port of thruster_samples')

   input_port('pipeline_samples', '/controlData::Pipeline').
        doc("visual pipeline samples from bottom_camera when pipeline detected").
        needs_reliable_connection

   input_port("pose_update", "/base/samples/RigidBodyState").
        doc("position samples from another localization").
        needs_reliable_connection
        
   input_port("gps_pose_samples", "/base/samples/RigidBodyState").
	doc("Position Information estimated by GPS").
	needs_reliable_connection
   
   input_port("battery_status", "/battery_management/batteryInformation").
	doc("Status of the batteries for use in the motion model")
   
   # ----------------------------------------------------------------------
   # properties
   # ----------------------------------------------------------------------

   property("debug", "bool", false).
        doc("write all debug informations to output ports")

   property("particle_number", "int", 40).
        doc("number of used particles")

   property("minimum_depth", "double", 0.0).
        doc("minimum depth for collecting perception samples")

   property("hough_interspersal_ratio", "double", 0.0).
        doc("ratio for generating new particles after each hough measurement")

   property("effective_sample_size_threshold", "double", 0.0).
	doc("effective sample size threshold controls the resampling timing and uses values between 0.0 and 1.0 particles")

   property("reset_timeout", "double", 10.0).
        doc("automatic reset of particle filter after not receiving any perception for X seconds")

   property("minimum_perceptions", "int", 5).
	doc("minimum number of perceptions before starting resampling")

   property("init_position", "/std/vector<double>").
        doc("initial centre position for all particles")

   property("init_variance", "/std/vector<double>").
        doc("spatial covariance from initial centre position for initialization")

   property("yaml_map", "/std/string").
	doc("start map for localization algorithm")

   property("sonar_maximum_distance", "double", 20.0).
        doc("set maximum distance for filtering sonar samples")

   property("sonar_minimum_distance", "double", 1.0).
        doc("set maximum distance for filtering sonar samples")

   property("sonar_covariance", "double", 2.0).
        doc("sets sonar covariance for defining measurement uncertainty")

   property("pipeline_covariance", "double", 1.0).
        doc("sets pipeline covariance for defining measurement uncertainty")

   property("pure_random_motion", "bool", false).
        doc("ignore velocity in speed samples for dynamic update")

   property("static_motion_covariance", "/std/vector<double>").
        doc("sets a static covariance for speed samples")

   property("sonar_importance", "double", 1.0).
	doc("sets importance ratio for sonar perception updates")

   property("pipeline_importance", "double", 0.5).
        doc("sets importance ratio for pipeline perception updates")

   property("perception_history_number", "int", 8).
        doc("set history size for determing uncertainty_degree of best measurement samples")

   property("init_sample_rejection", "int", 100).
        doc("dont use the first n sonar samples for state estimation")
   
   property("utm_relative_angle", "double", 0).
	doc("gives the angle difference between the coordinate-system and the utm-north") 
   
   property("gps_covarianz", "double", 1.0).
	doc("sets gps covariance for defining measurement uncertainty")
	
    property("gps_importance" , "double", 1.0).
	doc("sets importance ratio for gps perception updates")
	
    property("gps_interspersal_ratio" , "double", 0.01).
	doc("ratio for generating new particle after each gps_sample")
	
    property("advanced_motion_model" , "bool" , false).
	doc("uses the advanced motion model implemented in modul dagon/uwv_dynamic_model")
	
	
   #Covarianz-----------------------------
   
   property("sonar_vertical_angle", "double" , 0.52).
	doc("vertical opening angle of the sonar in radian")
	
   property("sonar_covariance_reflection_factor" , "double" , 1.2).
	doc("Factor for the sonar covariance.").
	doc("This factor is used, when the sonar-distance is in an range, at which a refelction from the water surface is possible")
	
   property("sonar_covariance_corner_factor", "double" , 2.0).
	doc("Factor for the sonar covariance.").
	doc("This factor is used to size up the covariance, when the sonar leads up to a corner")
	
    #---Motion model parameter----------------------------------------------------------------
    
    property("param_length" , "double" , 1.4).
	doc("length of avalon")
	
    property("param_radius" , "double" , 0.15).
	doc("radius of avalon")

    property("param_mass" , "double" , 65.0).
	doc("mass of avalon")
	
    property("param_thrusterCoefficient" , "/std/vector<double>" ).
	doc("Truster Coefficents, given as an row-wise 3x6 Matrix").
	doc("First row: constant factor").
	doc("Second row: linear factor").
	doc("Third row: square factor")
	
    property("param_thrusterVoltage" ,"double" , 25.4).
	doc("Thruster Volatage")

    property("param_TCM" , "/std/vector<double>" ).
	doc("Thruster Coefficient Matrix, which sets the direction of the thruster force")
    
    property("param_linDamp" , "base/MatrixXd")
    property("param_sqDamp" , "base/MatrixXd")
    property("param_linDampNeg" , "base/MatrixXd")
    property("param_sqDampNeg" , "base/MatrixXd")
    
    property("param_centerOfGravity", "base/Vector3d")
    property("param_centerOfBuoyancy", "base/Vector3d")
    
    property("param_floating" , "bool" , true).
	doc("true, if density of avalon = density of water")        
        
   # ----------------------------------------------------------------------
   # stream aligner
   # ----------------------------------------------------------------------
   stream_aligner do
       max_latency 2.0
       align_port "laser_samples", 0.1
       align_port "orientation_samples", 0.01
       align_port "speed_samples", 0.01
       align_port "thruster_samples", 0.01
       align_port "thruster_commands", 0.01
       align_port "pipeline_samples", 0.1
       align_port "pose_update", 0.1
       align_port "gps_pose_samples", 0.1 
   end
 
   port_driven :laser_samples
   port_driven :orientation_samples
   port_driven :thruster_samples
   port_driven :thruster_commands
   port_driven :speed_samples
   port_driven :pipeline_samples
   port_driven :pose_update
   port_driven :gps_pose_samples
end


# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "uw_particle_localization_test" do
    # This is a test deployment that should not be installed
    do_not_install
    add_default_logger

    # Declares it as periodic, with a period of 100ms
    task("uw_particle_localization", "Task")
end

