name "uw_particle_localization"

using_library "uw_localization"
using_library "machine_learning"
using_library "sonar_detectors"
using_task_library "sonar_wall_hough"
using_task_library "sonar_feature_estimator"

import_types_from "base"
import_types_from "tasks/Types.hpp"
import_types_from "LocalizationConfig.hpp"
import_types_from "uw_localization/types/particle.hpp"
import_types_from "uw_localization/types/info.hpp"
#import_types_from "uw_localization/types/map.hpp"
import_types_from "uw_localization/types/environment.hpp"
import_types_from "uw_localization/types/map.hpp"
import_types_from "sonar_wall_hough/tasks/DebugTypes.hpp"
import_types_from "sonar_feature_estimator/FeatureEstimationDebugTypes.hpp"
import_types_from "sonar_detectors/SonarDetectorTypes.hpp"


task_context "Task" do
  
   # ----------------------------------------------------------------------
   # output samples 
   # ----------------------------------------------------------------------
   
   output_port("pose_samples", "/base/samples/RigidBodyState").
	doc("poses measured by the particle filter")
   
   output_port("environment", "/uw_localization/Environment").
        doc("current map environment")

   output_port("dead_reckoning_samples", "/base/samples/RigidBodyState").
        doc("poses measured only by motion model")
        
   output_port("full_dead_reckoning", "/base/samples/RigidBodyState").
	doc("poes measured only by motion model, in al 6 degrees of freedom. Only available with the advanced motion model")

   output_port("particles", "/uw_localization/ParticleSet").
        doc("current particle set used in this filter")

   output_port("debug_sonar_beam", "/uw_localization/PointInfo").
        doc("Debug information for best sonar perceptions")

   output_port("stats", "/uw_localization/Stats").
        doc("various values representing current localization state")


   # ----------------------------------------------------------------------
   # input samples 
   # ----------------------------------------------------------------------

   input_port("laser_samples", "/base/samples/LaserScan").
        doc("relative distance sample to an obstacle in the environment").
        needs_reliable_connection

   input_port("speed_samples", "/base/samples/RigidBodyState").
        doc("current motion sample retrieved from our motion model").
        needs_reliable_connection   

   input_port("pose_update", "/base/samples/RigidBodyState").
        doc("position samples from another localization").
        needs_reliable_connection	
	  
    input_port("orientation_samples", "/base/samples/RigidBodyState").
	  doc("current orientation of the vehicle").
	  needs_reliable_connection
	  
   input_port("usbl_pose_samples", "/base/samples/RigidBodyState").
	doc("Usbl position information")
	
   input_port("usbl_angle_samples", "uw_localization/AngleWithTimestamp").
	doc("Dummy port for usbl angle information")
	
   input_port("visual_marker_samples", "/base/samples/RigidBodyState").
	doc("Position sample in the world_frame, estimated by a visual marker")

   
   # ----------------------------------------------------------------------
   # properties
   # ----------------------------------------------------------------------

   property("debug", "bool", false).
        doc("write all debug informations to output ports")

   property("particle_number", "int", 40).
        doc("number of used particles")

   property("minimum_depth", "double", 0.0).
        doc("minimum depth for collecting perception samples")

   property("hough_interspersal_ratio", "double", 0.0).
        doc("ratio for generating new particles after each hough measurement")
        
   property("hough_timeout", "double", 20.0).
        doc("Timeout ,after not recieving any hough input for x seconds")
        
   property("hough_timeout_interspersal", "double", 0.0)
        doc("ratio for generating new random particles, after hough timeout")

   property("effective_sample_size_threshold", "double", 0.0).
	doc("effective sample size threshold controls the resampling timing and uses values between 0.0 and 1.0 particles")

   property("reset_timeout", "double", 10.0).
        doc("automatic reset of particle filter after not receiving any perception for X seconds")
        
   property("speed_samples_timeout", "double", 1.0).
        doc("If both speed_samples and thruster_samples are used").
        doc("Use thruster_samples if we have a timeout of x seconds on the speed_samples")

   property("minimum_perceptions", "int", 5).
	doc("minimum number of perceptions before starting resampling")

   property("init_position", "/std/vector<double>").
        doc("initial centre position for all particles")

   property("init_variance", "/std/vector<double>").
        doc("spatial covariance from initial centre position for initialization")

   property("yaml_map", "/std/string").
	doc("start map for localization algorithm")

   property("sonar_maximum_distance", "double", 20.0).
        doc("set maximum distance for filtering sonar samples")

   property("sonar_minimum_distance", "double", 1.0).
        doc("set maximum distance for filtering sonar samples")

   property("sonar_covariance", "double", 2.0).
        doc("sets sonar covariance for defining measurement uncertainty")

   property("pure_random_motion", "bool", false).
        doc("ignore velocity in speed samples for dynamic update")

   property("static_motion_covariance", "/std/vector<double>").
        doc("sets a static covariance for the motion model")
        
   property("static_speed_covariance", "/std/vector<double>").
        doc("sets a static covariance for the speed samples")

   property("sonar_importance", "double", 1.0).
	doc("sets importance ratio for sonar perception updates")
	
   property("usbl_importance", "double", 1.0)
   
   property("usbl_range_variance", "double", 1.0)
   
   property("usbl_angle_variance", "double", 0.1)
   
   property("visual_marker_importance", "double", 1.0)        

   property("perception_history_number", "int", 8).
        doc("set history size for determing uncertainty_degree of best measurement samples")

   property("init_sample_rejection", "int", 100).
        doc("dont use the first n sonar samples for state estimation")
        
   property("orientation_offset", "double", 0.0)
   
   property("filter_zeros", "bool", true).
        doc("Filter out particles with zero confidence (e.g. particle is out of map)")
        
   property("use_markov", "bool" , true)
   
   property("avg_particle_position", "bool", true).
        doc("Calculate position by calculating the avg particle position")
        
   property("use_best_feature_only", "bool", true).
        doc("Only use the best modeled feature for particle rating").
        doc("If false, feature ratings will be multiplied")
        
   #Sensor-transformation------------------------------------------------------------------
      
   
   property("sonar_position", "base/Vector3d").
	doc("transformation of the sonar, with respect to the origin of avalon")

	
  property("dvl_rotation", "base/Vector3d").
      doc("Rotation of the dvl")
      
  property("usbl_position", "base/Vector3d")
  property("usbl_rotation", "base/Vector3d")
	

	
   #Covarianz modification---------------------------------------------------------------------
   
   
   
   property("sonar_vertical_angle", "double" , 0.52).
	doc("vertical opening angle of the sonar in radian")
	
   property("sonar_covariance_reflection_factor" , "double" , 1.0).
	doc("Factor for the sonar covariance.").
	doc("This factor is used, when the sonar-distance is in an range, at which a refelction from the water surface is possible")
	
   property("sonar_covariance_corner_factor", "double" , 1.0).
	doc("Factor for the sonar covariance.").
	doc("This factor is used to size up the covariance, when the sonar leads up to a corner")
	
   property("position_covariance_threshold", "double", 1.0).
      doc("Output variances below this sigma threshold will be set the value of the threshold")
	           
            
        
   # ----------------------------------------------------------------------
   # stream aligner
   # ----------------------------------------------------------------------
   stream_aligner do
       max_latency 1.0
       align_port "laser_samples", 0.1
       align_port "orientation_samples", 0.01
       align_port "speed_samples", 0.01
       align_port "usbl_pose_samples", 0.1
       align_port "usbl_angle_samples", 0.1
       align_port "visual_marker_samples", 0.1

   end
 
   port_driven :laser_samples
   port_driven :orientation_samples
   port_driven :speed_samples
   port_driven :pose_update

   
   runtime_states "LOCALIZING", "NO_ORIENTATION", "NO_SONAR", "ABOVE_SURFACE", "NO_HOUGH", "NO_JOINTS_NO_DVL", "INVALID_VALUES"
   
end

task_context "OrientationCorrection" do
###################
# This Task corrects orientation samples to the wanted world-frame.
# For Correction magnetic north and 

  operation("reset").
    argument("angle", "double").
    returns("bool")

  
  property("buffer_size", "int", 10).
    doc("Size of the offset_buffer")
    
  property("min_buffer_size" , "int", 3).
    doc("Minimum number of offset_samples, used for offset calculation")  
  
  
  input_port("orientation_input", "base/samples/RigidBodyState").
    doc("Orientationsamples of the orientation-estimator")
  
  
  input_port("orientation_offset", "sonar_wall_hough/PositionQuality").
    doc("Offsetsamples of the sonar-localization")
  
  
  output_port("orientation_output", "base/samples/RigidBodyState").
    doc("North-Corrected orientation samples. Only the imu is used for correction")
    
  output_port("orientation_offset_corrected", "base/samples/RigidBodyState").
    doc("North- and Offset-corrected orientation samples")
    
  runtime_states "RESET"
  
  port_driven
end



###############################################################################################################
# This Task provides a full rigid body state, by fusion of direct sensor input and localization-data
# This task works WITHOUT a stream-aligner, so the data-delay should be on a minimum, but data may be missaligned
###############################################################################################################
task_context "FastFusion" do
   
   input_port("position_samples", "/base/samples/RigidBodyState").
      doc("Contains x- and y-positions").
      doc("Alternativ to the velocity_samples, this port can also contain linear velocities")
   
   input_port("depth_samples", "/base/samples/RigidBodyState").
      doc("Contains depth and depth velocity")
      
   input_port("orientation_samples", "/base/samples/RigidBodyState").
      doc("Contains orientation and angular velocity")
      
   input_port("velocity_samples", "/base/samples/RigidBodyState").
      doc("contains linear velocites").
      doc("Velocity in body-frame")
   
   
   output_port("pose_samples", "/base/samples/RigidBodyState")
   
   property("velocity_timeout", "double", 0.5).
      doc("Timeout for velocity samples, after which the position_samples-veelocity is used")
   
   
   port_driven   
   
end



#Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "uw_particle_localization_test" do
    # This is a test deployment that should not be installed
    do_not_install
    #add_default_logger

    # Declares it as periodic, with a period of 100ms
    task("uw_particle_localization", "Task")
end

deployment "orientation_correction_test" do
  do_not_install
  #add_default_logger
  
  task("orientation_correction", "OrientationCorrection")
end


